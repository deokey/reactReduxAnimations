{"version":3,"sources":["logo.svg","components/Header/index.js","components/Footer/index.js","components/Body/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","token","this","props","react_default","a","createElement","Component","connect","state","Footer","index","className","src","logo","alt","href","target","rel","App","components_Header","Body_index","Footer_Footer","Boolean","window","location","hostname","match","store","createStore","action","type","newProps","payload","console","log","Object","objectSpread","cheet","dispatch","Math","random","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCiBlCC,mLACK,IAECC,EAAUC,KAAKC,MAAfF,MACR,OAAOG,EAAAC,EAAAC,cAAA,+BAAuBL,UAJbM,aAUNC,cAdS,SAAAC,GAAK,MAAK,CAChCR,MAAOQ,EAAMR,QAaAO,CAAyBR,GCzBnBU,mLAEjB,OAAON,EAAAC,EAAAC,cAAA,4BAFyBC,8BCAfI,mLAEjB,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cACbR,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCX,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEM,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,uBAR2BX,aCiBpBY,0LAVX,OACEf,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cANUf,cCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFCsCAC,EAAQC,YAjBE,SAACpB,EAAOqB,GACtB,OAAQA,EAAOC,MACb,IAAK,eACH,IAAMC,EAAWF,EAAOG,QAAQ9B,MAEhC,OADA+B,QAAQC,IAAI1B,EAAOqB,EAAQE,GACpBI,OAAAC,EAAA,EAAAD,CAAA,GACF3B,EACAuB,GAGP,QACE,OAAOvB,IAhCQ,IAwCrB6B,IAAM,QAAS,WAIbV,EAAMW,SAAS,CACbR,KAAM,eACNE,QAAS,CACP9B,MAAO,CAAEF,MAAOuC,KAAKC,eAK3BC,IAASC,OACPvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUhB,MAAOA,GACfxB,EAAAC,EAAAC,cAACuC,EAAD,OAEFC,SAASC,eAAe,SDmDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e60e2432.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n// 7. importamos el metodo connect para conectar el store global con redux\nimport { connect } from 'react-redux';\n\n// 9. creamos la funcion que conecta nuestro state global con las props del componente para ser usadas\n// dichas propiedades, aqui traemos las cosas que queremos usar y mantener del state global\n\n// function mapStateToProps(state) {\n//   return {\n//     token: state.token\n//   };\n// }\nconst mapStateToProps = state => ({\n  token: state.token\n});\n\nclass Header extends Component {\n  render() {\n    // 10. desestructuramos nuestro objeto props que tiene la data que queremos y la usamos en el componente\n    const { token } = this.props;\n    return <header>Header Numero {token}</header>;\n  }\n}\n\n// 8. conectamos el componente a nuestro store\n// connect(mapStateToProps)(Component)\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\n\nexport default class Footer extends Component {\n  render() {\n    return <div>Footer</div>;\n  }\n}\n","import React, { Component } from 'react';\nimport logo from '../../logo.svg';\nexport default class index extends Component {\n  render() {\n    return (\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Body from './components/Body';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Body />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* se importa cheetjs y se llama su funcion para que podamos trabajar con su funcionalidad desde todo el\nmarco del proyecto */\nimport cheet from 'cheet.js';\n\n// Para implementar redux\n// 1. importamos el provider que servira para encapsular a nuestra app para que lleve la data a todo su content\nimport { Provider } from 'react-redux';\n\n// 2. importamos el store ya que nuestro componente provider necesita un store para almacenar su data.\nimport { createStore } from 'redux';\n\n// 4. creamos un initialState\nconst initialState = {};\n\n// 5. creamos un reducer\n// es una funcion que se usa para hacer cambios al estado\n// reducer(state,action)\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case 'UPDATE_PROPS': {\n//       const newProps = action.payload.props;\n//       console.log(state, action, newProps);\n//       return {\n//         ...state,\n//         ...newProps\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_PROPS': {\n      const newProps = action.payload.props;\n      console.log(state, action, newProps);\n      return {\n        ...state,\n        ...newProps\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n// 3. instanciamos el store y lo agregamos al Provider como atributo\n// createStore(reducer, initialState)\nconst store = createStore(reducer, initialState);\n\ncheet('a s d', () => {\n  // 6. impelementamos un cambio en el state llamando al metodo dispatch del store.\n  // dispatch recibe un objeto, ese objeto debe poseer el tipo de action ya establecida en el reducer\n  // y un cambio en el estado\n  store.dispatch({\n    type: 'UPDATE_PROPS',\n    payload: {\n      props: { token: Math.random() }\n    }\n  });\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}